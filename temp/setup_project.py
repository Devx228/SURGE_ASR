# # setup_project.py
# #!/usr/bin/env python3
# """
# Setup script for Sanskrit ASR project
# """

# import os
# import sys
# import subprocess
# import logging
# from pathlib import Path

# logging.basicConfig(level=logging.INFO)
# logger = logging.getLogger(__name__)

# def check_python_version():
#     """Check if Python version is compatible"""
#     if sys.version_info < (3, 7):
#         logger.error("Python 3.7 or higher is required")
#         return False
#     logger.info(f"тЬЕ Python version: {sys.version}")
#     return True

# def install_requirements():
#     """Install required packages"""
#     requirements = [
#         'torch>=1.9.0',
#         'torchaudio>=0.9.0', 
#         'numpy>=1.21.0',
#         'pandas>=1.3.0',
#         'tqdm>=4.62.0',
#         'matplotlib>=3.4.0',
#         'seaborn>=0.11.0',
#         'editdistance>=0.5.3',
#         'soundfile>=0.10.0',
#         'librosa>=0.8.0',
#         'pydub>=0.25.0'
#     ]
    
#     logger.info("Installing required packages...")
    
#     for req in requirements:
#         try:
#             subprocess.check_call([sys.executable, '-m', 'pip', 'install', req])
#             logger.info(f"тЬЕ Installed {req}")
#         except subprocess.CalledProcessError:
#             logger.error(f"тЭМ Failed to install {req}")
#             return False
    
#     return True

# def check_ffmpeg():
#     """Check if ffmpeg is available"""
#     try:
#         subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
#         logger.info("тЬЕ ffmpeg is available")
#         return True
#     except (subprocess.CalledProcessError, FileNotFoundError):
#         logger.warning("тЪая╕П ffmpeg not found")
#         logger.info("Install ffmpeg for M4A support:")
#         logger.info("  Ubuntu/Debian: sudo apt-get install ffmpeg")
#         logger.info("  macOS: brew install ffmpeg")
#         logger.info("  Windows: Download from https://ffmpeg.org/")
#         logger.info("  Alternative: Will use pydub as fallback")
#         return False

# def create_directory_structure():
#     """Create project directory structure"""
#     dirs = [
#         './data',
#         './data/hindi_audio',
#         './data/sanskrit_audio',
#         './data/hindi_wav',
#         './data/sanskrit_wav',
#         './data/alignments',
#         './data/cache',
#         './data/cache/features',
#         './outputs',
#         './logs',
#         './temp'
#     ]
    
#     logger.info("Creating directory structure...")
#     for d in dirs:
#         os.makedirs(d, exist_ok=True)
#         logger.info(f"тЬЕ Created {d}")

# def create_sample_tsv_files():
#     """Create sample TSV files to show format"""
    
#     # Sample Hindi TSV
#     hindi_sample = """audio001.m4a	рдпрд╣ рдПрдХ рд╣рд┐рдВрджреА рд╡рд╛рдХреНрдп рд╣реИ
# audio002.m4a	рдореИрдВ рд╣рд┐рдВрджреА рдореЗрдВ рдмреЛрд▓ рд░рд╣рд╛ рд╣реВрдВ
# audio003.m4a	рдпрд╣ рдкреНрд░рд╢рд┐рдХреНрд╖рдг рдХрд╛ рдбреЗрдЯрд╛ рд╣реИ
# audio004.m4a	рд╣рдо рднрд╛рд╖рд╛ рдкрд╣рдЪрд╛рди рд╕реАрдЦ рд░рд╣реЗ рд╣реИрдВ
# audio005.m4a	рдпрд╣ рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рднрд╛рд╖рдг рдкрд╣рдЪрд╛рди рд╣реИ"""
    
#     # Sample Sanskrit TSV (using realistic Sanskrit)
#     sanskrit_sample = """844424932806112-643-f.m4a	рдХрд┐рдиреНрддреБ рдПрд╖рдГ рдпрд▓реНрд▓рд╛рдкреНрд░рдЧрдбрд╕реБрдмреНрдмрд░рд╛рд╡рдГ рдЬреАрд╡рдирд╕реНрдп рдмрд╣реБрднрд╛рдЧрдореН рдЕрдореЗрд░рд┐рдХрд╛рджреЗрд╢реЗ рдПрд╡ рдЕрдпрд╛рдкрдпрддреН
# 844424932812543-643-f.m4a	рддрд╕реНрдп рдордирдГ рдЕрдкрд┐ рдЗрдиреНрджреНрд░рд┐рдпреИрдГ рд╕рд╣ рдпреБрдХреНрддрдВ рд╕рддреН рдмреБрджреНрдзрд┐рдВ рд╡рд┐рдЪрд▓рд┐рддрд╛рдВ рдХрд░реНрддреБрдВ рди рдкреНрд░рднрд╡рддрд┐
# 844424932880843-1102-f.m4a	релрез рее реР рд╢реНрд░реАрдВ рдХреНрд░реАрдВ рд╣реВрдБ рдЪ рд╕реНрдореЗрд░рд╛рд╕реНрдпрд╛ реР рд╢реНрд░реАрдВ рд╕реНрдорд░рд╡рд┐рд╡рджреНрдзрд┐рдиреА
# 844424932814588-643-f.m4a	рдпрджрд┐ рд╡рд┐рджрд┐рддрдВ рд╕ рдирд░рдГ рд╕реНрд╡рдХрдореЛрд╣рдВ рддрд░рддрд┐ рд╢рд┐рд╡рдВ рд╡рд┐рд╢рддрд┐ рдкреНрд░рд┐рдпрд░реВрдкрдореН рее
# 844424932855748-643-f.m4a	рд╕рджреНрдпрдГ рдХрд╛рд▓реЗ рд╢реНрд░реА рдореБрд░реБрдШрд░рд╛рдЬреЗрдиреНрджреНрд░рд╕реНрд╡рд╛рдореА рдорд▓реНрд▓рд╛рдбрд┐рд╣рд│реНрд│рд┐ рд╡рд░реНрддрдорд╛рдирд╛рдирд╛рдВ рд╕рд░реНрд╡рд╕рдЩреНрдШрдЯрдирд╛рдирд╛рдВ рджрд╛рдпрд┐рддреНрд╡рдВ рд╕реНрд╡реАрдХреГрддреНрдп рдкреНрд░рдЪрд╛рд▓рдпрдиреН рдЕрд╕реНрддрд┐"""
    
#     # Save TSV files
#     with open('./data/hindi_sample.tsv', 'w', encoding='utf-8') as f:
#         f.write(hindi_sample)
    
#     with open('./data/sanskrit_sample.tsv', 'w', encoding='utf-8') as f:
#         f.write(sanskrit_sample)
    
#     logger.info("тЬЕ Created sample TSV files")
#     logger.info("  - ./data/hindi_sample.tsv")
#     logger.info("  - ./data/sanskrit_sample.tsv")

# def create_vocabulary_file():
#     """Create a basic vocabulary file"""
#     vocab = [
#         '<unk>', '<pad>', '<sos>', '<eos>',
#         # Hindi words
#         'рдпрд╣', 'рдПрдХ', 'рд╣реИ', 'рд╣реИрдВ', 'рдХреА', 'рдХреЗ', 'рдХреЛ', 'рдореЗрдВ', 'рд╕реЗ', 'рдкрд░',
#         'рдФрд░', 'рдпрд╛', 'рддреЛ', 'рдЬреЛ', 'рдХрд┐', 'рдЕрдЧрд░', 'рддрдм', 'рдлрд┐рд░', 'рдЕрдм', 'рдпрд╣рд╛рдБ', 'рд╡рд╣рд╛рдБ',
#         'рдХреИрд╕реЗ', 'рдХреНрдпреЛрдВ', 'рдХрдм', 'рдХрд╣рд╛рдБ', 'рдХреНрдпрд╛', 'рдХреМрди', 'рдХрд┐рддрдирд╛', 'рдХрд┐рддрдиреА', 'рдХреБрдЫ', 'рд╕рдм',
#         'рдореИрдВ', 'рддреБрдо', 'рд╡рд╣', 'рд╣рдо', 'рдЖрдк', 'рд╡реЗ', 'рдореЗрд░рд╛', 'рддреБрдореНрд╣рд╛рд░рд╛', 'рдЙрд╕рдХрд╛', 'рд╣рдорд╛рд░рд╛',
#         'рдмреЛрд▓', 'рдмреЛрд▓рдирд╛', 'рдХрд╣рдирд╛', 'рд╕реБрдирдирд╛', 'рджреЗрдЦрдирд╛', 'рдЖрдирд╛', 'рдЬрд╛рдирд╛', 'рдХрд░рдирд╛', 'рд╣реЛрдирд╛',
#         'рд╡рд╛рдХреНрдп', 'рд╢рдмреНрдж', 'рднрд╛рд╖рд╛', 'рд╣рд┐рдВрджреА', 'рд╕рдВрд╕реНрдХреГрдд', 'рдкреНрд░рд╢рд┐рдХреНрд╖рдг', 'рдбреЗрдЯрд╛', 'рдореЙрдбрд▓',
#         # Sanskrit words  
#         'рдЗрджрдВ', 'рддрддреН', 'рдПрддрддреН', 'рд╡рд╛рдХреНрдпрдореН', 'рдЕрд╕реНрддрд┐', 'рднрд╡рддрд┐', 'рдЧрдЪреНрдЫрддрд┐', 'рдЖрдЧрдЪреНрдЫрддрд┐',
#         'рд╢реНрд░реА', 'реР', 'рдирдордГ', 'рд╕реНрд╡рд╛рд╣рд╛', 'рдордиреНрддреНрд░', 'рдпрдЬреНрдЮ', 'рд╣реЛрдо', 'рдкреВрдЬрд╛', 'рджреЗрд╡', 'рджреЗрд╡реА',
#         'рдХрд┐рдиреНрддреБ', 'рдПрд╖рдГ', 'рддрд╕реНрдп', 'рдордирдГ', 'рдЕрдкрд┐', 'рд╕рддреН', 'рди', 'рдпрджрд┐', 'рд╕', 'рдирд░рдГ',
#         'рдЬреАрд╡рдирд╕реНрдп', 'рдмрд╣реБрднрд╛рдЧрдореН', 'рдЕрдореЗрд░рд┐рдХрд╛рджреЗрд╢реЗ', 'рдПрд╡', 'рдпреБрдХреНрддрдВ', 'рдмреБрджреНрдзрд┐рдВ', 'рд╡рд┐рдЪрд▓рд┐рддрд╛рдВ',
#         'рдХрд░реНрддреБрдВ', 'рдкреНрд░рднрд╡рддрд┐', 'рд╡рд┐рджрд┐рддрдВ', 'рд╕реНрд╡рдХрдореЛрд╣рдВ', 'рддрд░рддрд┐', 'рд╢рд┐рд╡рдВ', 'рд╡рд┐рд╢рддрд┐', 'рдкреНрд░рд┐рдпрд░реВрдкрдореН'
#     ]
    
#     with open('./data/vocab.txt', 'w', encoding='utf-8') as f:
#         for word in vocab:
#             f.write(word + '\n')
    
#     logger.info(f"тЬЕ Created vocabulary file with {len(vocab)} words")

# def verify_setup():
#     """Verify that setup is complete"""
#     logger.info("\nVerifying setup...")
    
#     # Check directories
#     required_dirs = [
#         './data', './data/hindi_audio', './data/sanskrit_audio',
#         './outputs', './data/cache'
#     ]
    
#     for d in required_dirs:
#         if os.path.exists(d):
#             logger.info(f"тЬЕ {d}")
#         else:
#             logger.error(f"тЭМ {d}")
#             return False
    
#     # Check sample files
#     if os.path.exists('./data/vocab.txt'):
#         logger.info("тЬЕ Vocabulary file")
#     else:
#         logger.error("тЭМ Vocabulary file")
#         return False
    
#     return True

# def print_next_steps():
#     """Print next steps for the user"""
#     print(f"""
# {'='*60}
# ЁЯОЙ SETUP COMPLETE!
# {'='*60}

# ЁЯУБ Directory structure created:
#    ./data/hindi_audio/     - Place your Hindi M4A files here
#    ./data/sanskrit_audio/  - Place your Sanskrit M4A files here
#    ./outputs/              - Trained models will be saved here
#    ./data/cache/           - Cached preprocessed data

# ЁЯУЛ Next steps:

# 1. Prepare your data:
#    a) Place your 3229 Hindi M4A files in ./data/hindi_audio/
#    b) Place your 1620 Sanskrit M4A files in ./data/sanskrit_audio/
#    c) Create ./data/hindi.tsv with format: audio_file.m4a<TAB>transcript
#    d) Create ./data/sanskrit.tsv with format: audio_file.m4a<TAB>transcript

# 2. Run preprocessing (one-time setup):
#    python main_fixed.py --preprocess-only

# 3. Start training:
#    python main_fixed.py --model both --epochs 10

# 4. Quick test (fewer epochs):
#    python main_fixed.py --model GRL --epochs 5

# ЁЯФз Useful commands:

# # Preprocess data only
# python main_fixed.py --preprocess-only

# # Train specific model
# python main_fixed.py --model DSN --epochs 10

# # Resume training (skip preprocessing)
# python main_fixed.py --skip-preprocess --model both

# # Custom settings
# python main_fixed.py --model DSN --epochs 20 --batch-size 8 --learning-rate 0.0005

# ЁЯУК Expected results:
#    - Baseline (Hindi only): ~24.58% WER
#    - With UDA (GRL/DSN): ~17-18% WER

# тЪая╕П  Important notes:
#    - First run will take time to convert M4A files to WAV
#    - Converted files are cached to avoid re-conversion
#    - Basic alignments are generated automatically
#    - For better results, consider using Kaldi alignments later

# {'='*60}
# """)

# def main():
#     print("""
# тХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧ
# тХС           Sanskrit ASR Project Setup                         тХС
# тХС           Cross-lingual ASR using UDA                        тХС
# тХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭ
# """)
    
#     # Check Python version
#     if not check_python_version():
#         sys.exit(1)
    
#     # Install requirements
#     install_response = input("Install required Python packages? (y/n): ").lower()
#     if install_response == 'y':
#         if not install_requirements():
#             logger.error("Failed to install requirements")
#             sys.exit(1)
    
#     # Check ffmpeg
#     check_ffmpeg()
    
#     # Create directory structure
#     create_directory_structure()
    
#     # Create sample files
#     create_sample_tsv_files()
#     create_vocabulary_file()
    
#     # Verify setup
#     if verify_setup():
#         logger.info("тЬЕ Setup verification passed")
#     else:
#         logger.error("тЭМ Setup verification failed")
#         sys.exit(1)
    
#     # Print next steps
#     print_next_steps()

# if __name__ == "__main__":
#     main()